local placeId = game.PlaceId
local allowedPlaceId = 15744137588

if placeId ~= allowedPlaceId then
    return
end

local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

local Window = Fluent:CreateWindow({
    Title = "  [UPD2] +1 Blade Slayer",
    SubTitle = " By Nozer Hub",
    TabWidth = 120,
    Size = UDim2.fromOffset(500, 350),
    Acrylic = false,
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.E -- Define a tecla para minimizar a janela
})

local Tabs = {
    Credits = Window:AddTab({ Title = "Credits", Icon = "info" }),
    Settings = Window:AddTab({ Title = "Settings", Icon = "settings" }),
    Farm = Window:AddTab({ Title = "Farm", Icon = "activity" }),
    Player = Window:AddTab({ Title = "Player", Icon = "user-cog" }),
    Teleport = Window:AddTab({ Title = "Teleport", Icon = "map-pin" }),
    Others = Window:AddTab({ Title = "Others", Icon = "menu" }),
    Eggs = Window:AddTab({ Title = "Eggs", Icon = "star" }),
    Misc = Window:AddTab({ Title = "Misc", Icon = "codesandbox" })
}

local Options = Fluent.Options

Fluent:Notify({
    Title = "By Nozer Hub",
    Content = "Thanks for using the script",
    Duration = 5
})

SaveManager:SetLibrary(Fluent)
InterfaceManager:SetLibrary(Fluent)
SaveManager:IgnoreThemeSettings()
SaveManager:SetIgnoreIndexes({})
InterfaceManager:SetFolder("FluentScriptHub")
SaveManager:SetFolder("FluentScriptHub/specific-game")
InterfaceManager:BuildInterfaceSection(Tabs.Settings)
SaveManager:BuildConfigSection(Tabs.Settings)

Window:SelectTab(1)

Fluent:Notify({
    Title = "Fluent", 
    Content = "The script has been loaded.", 
    Duration = 3
})

SaveManager:LoadAutoloadConfig()

local linkParaCopiar = "https://www.youtube.com/@NozerHub"

Tabs.Credits:AddButton({
    Title = "Copy Link Channel",
    Callback = function()
        setclipboard(linkParaCopiar)
    end
})

Tabs.Credits:AddParagraph({ Title = "Owner: Nozer Hub" })
Tabs.Credits:AddParagraph({ Title = "Update 9/12" })

local AntiAFKEnabled = true
local Toggle = Tabs.Misc:AddToggle("MyToggle", { Title = "Anti AFK", Default = true })

Toggle:OnChanged(function()
    AntiAFKEnabled = Toggle.Value  -- Corrigido aqui
end)

Toggle:SetValue(true)

local VirtualUser = game:GetService("VirtualUser")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

LocalPlayer.Idled:Connect(function()
    if AntiAFKEnabled then
        VirtualUser:Button2Down(Vector2.new(0, 0), workspace.CurrentCamera.CFrame)
        task.wait(1)
        VirtualUser:Button2Up(Vector2.new(0, 0), workspace.CurrentCamera.CFrame)
    end
end)

Tabs.Misc:AddButton({
    Title = "Server Hop",
    Callback = function()
        local TeleportService = game:GetService("TeleportService")
        local HttpService = game:GetService("HttpService")
        local placeId = game.PlaceId

        local function serverHop()
            local servers
            local cursor = ""

            local success, response = pcall(function()
                local url = "https://games.roblox.com/v1/games/" .. placeId .. "/servers/Public?sortOrder=Asc&limit=100&cursor=" .. cursor
                return HttpService:JSONDecode(game:HttpGet(url))
            end)

            if success and response and response.data then
                servers = response.data
            else
                return
            end

            for _, server in ipairs(servers) do
                if server.id ~= game.JobId and server.playing < server.maxPlayers then
                    TeleportService:TeleportToPlaceInstance(placeId, server.id)
                    return
                end
            end

            if response.nextPageCursor then
                cursor = response.nextPageCursor
                serverHop()
            end
        end

        serverHop()
    end
})

Tabs.Misc:AddButton({
    Title = "Rejoin", 
    Callback = function()
        local TeleportService = game:GetService("TeleportService")
        local player = game.Players.LocalPlayer
        TeleportService:Teleport(game.PlaceId, player)
    end
})

local FuseWeaponToggle = Tabs.Others:AddToggle("FuseWeaponToggle", {
    Title = "Auto Fuse Weapon",
    Default = false,
})

local fuseWeaponConnection

FuseWeaponToggle:OnChanged(function()
    if FuseWeaponToggle.Value then
        while FuseWeaponToggle.Value do
            game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("FuseWeapon"):FireServer()
            task.wait(0.5)
        end
    else
        fuseWeaponConnection = nil
    end
end)

local AutoClaimRewardToggle = Tabs.Others:AddToggle("AutoClaimRewardToggle", {
    Title = "Auto Claim Reward", 
    Default = false,
})

local claimRewardConnection

AutoClaimRewardToggle:OnChanged(function()
    if AutoClaimRewardToggle.Value then
        -- Iniciando o loop com task.wait
        while AutoClaimRewardToggle.Value do
            for id = 120, 134 do
                local args = {
                    [1] = {
                        ["id"] = tostring(id)
                    }
                }
                game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("ClaimOnlineReward"):InvokeServer(unpack(args))
            end
            task.wait(0.5)
        end
    else
    
        claimRewardConnection = nil
    end
end)

local EnemyDropdown
local AutoFarmSelectedToggle
local UpdateButton
local selectedEnemy, lastTarget = nil, nil

local function populateEnemyList()
    local enemies, enemyNames, uniqueNames = workspace.Enemys:GetChildren(), {}, {}
    for _, enemy in ipairs(enemies) do
        if enemy.Name and not uniqueNames[enemy.Name] then
            local cleanName = enemy.Name:gsub("%d+", "")
            table.insert(enemyNames, cleanName)
            uniqueNames[enemy.Name] = true
        end
    end
    if EnemyDropdown then
        EnemyDropdown:SetValues(enemyNames)
    end
end

populateEnemyList()

local function adjustToGroundPosition(position)
    local rayOrigin, rayDirection = position + Vector3.new(0, 10, 0), Vector3.new(0, -20, 0)
    local ray = workspace:Raycast(rayOrigin, rayDirection)
    return ray and ray.Position.Y or position.Y
end

EnemyDropdown = Tabs.Farm:AddDropdown("EnemyDropdown", {
    Title = "Select Enemy", 
    Default = nil, 
    Values = {}
})

AutoFarmSelectedToggle = Tabs.Farm:AddToggle("AutoFarmSelected", {
    Title = "Auto Farm Selected Enemy", 
    Default = false
})

UpdateButton = Tabs.Farm:AddButton({
    Title = "Refresh Enemy", 
    Callback = function()
        populateEnemyList()
    end
})

EnemyDropdown:OnChanged(function(value)
    selectedEnemy = value
end)

AutoFarmSelectedToggle:OnChanged(function()
    local player, character, area = game:GetService("Players").LocalPlayer, game:GetService("Players").LocalPlayer.Character, workspace.Enemys
    if AutoFarmSelectedToggle.Value then
        character.HumanoidRootPart.Anchored = true
        local characterPosition, groundY = character.HumanoidRootPart.Position, adjustToGroundPosition(character.HumanoidRootPart.Position)
        character:SetPrimaryPartCFrame(CFrame.new(characterPosition.X, groundY, characterPosition.Z))
    else
        character.HumanoidRootPart.Anchored = false
    end
    while AutoFarmSelectedToggle.Value do
        if selectedEnemy then
            local targetEnemy = nil
            for _, enemy in ipairs(area:GetChildren()) do
                local cleanName = enemy.Name:gsub("%d+", "")
                if cleanName == selectedEnemy then
                    targetEnemy = enemy
                    break
                end
            end
            if targetEnemy and targetEnemy:FindFirstChild("HumanoidRootPart") then
                if lastTarget ~= targetEnemy then
                    lastTarget = targetEnemy
                    local enemyPosition, groundY = targetEnemy.HumanoidRootPart.Position, adjustToGroundPosition(targetEnemy.HumanoidRootPart.Position)
                    character:SetPrimaryPartCFrame(CFrame.new(enemyPosition.X, groundY, enemyPosition.Z))
                    task.wait(0.1)
                end
            else
                lastTarget = nil
            end
        end
        task.wait(0.1)
    end
    character.HumanoidRootPart.Anchored = false
end)

local KillAuraSection = Tabs.Farm:AddSection("Kill Aura")

local Toggle = Tabs.Farm:AddToggle("KillAuraToggle", {Title = "Kill Aura", Default = false })

Toggle:OnChanged(function(value)
    if value then
        _G.KillAuraActive = true
    else
        _G.KillAuraActive = false
    end
end)

Toggle:SetValue(false)

local Input = Tabs.Farm:AddInput("Input", {
    Title = "Delay Time Kill Aura",
    Default = "0.1",
    Placeholder = "Enter time in seconds",
    Numeric = true,
    Finished = false,
    Callback = function(Value) end
})

Input:OnChanged(function() end)

task.spawn(function()
    while true do
        if _G.KillAuraActive then
            local ReplicatedStorage = game:GetService("ReplicatedStorage")
            local Remotes = ReplicatedStorage:WaitForChild("Remotes")
            local PlayerClickAttack = Remotes:WaitForChild("PlayerClickAttack")
            local ClickEnemy = Remotes:WaitForChild("ClickEnemy")
            local EnemiesFolder = workspace:WaitForChild("Enemys")
            local player = game.Players.LocalPlayer

            local character = player.Character or player.CharacterAdded:Wait()
            local rootPart = character:WaitForChild("HumanoidRootPart", 10)

            if not rootPart then
                task.wait(1)
                continue
            end

            local closestEnemy = nil
            local closestDistance = math.huge

            for _, enemy in ipairs(EnemiesFolder:GetChildren()) do
                if enemy:FindFirstChild("HumanoidRootPart") and enemy:GetAttribute("EnemyGuid") then
                    local distance = (rootPart.Position - enemy.HumanoidRootPart.Position).Magnitude
                    if distance < closestDistance then
                        closestDistance = distance
                        closestEnemy = enemy
                    end
                end
            end

            if closestEnemy then
                local success, err = pcall(function()
                    local enemyGuid = closestEnemy:GetAttribute("EnemyGuid")
                    local enemyPos = closestEnemy.HumanoidRootPart.Position

                    local clickArgs = {
                        [1] = {
                            ["enemyGuid"] = enemyGuid,
                            ["enemyPos"] = enemyPos
                        }
                    }
                    ClickEnemy:InvokeServer(unpack(clickArgs))

                    local attackArgs = {
                        [1] = {
                            ["attackEnemyGUID"] = enemyGuid
                        }
                    }
                    PlayerClickAttack:FireServer(unpack(attackArgs))
                end)

                if not success then
                    warn("Erro ao executar Kill Aura: " .. err)
                end
            end

            local delay = tonumber(Input.Value) or 0.1
            if delay < 0.1 then
                delay = 0.1
            end
            task.wait(delay)
        else
            task.wait(0.1)
        end
    end
end)

local AutoRebornToggle = Tabs.Player:AddToggle("AutoRebornToggle", {
    Title = "Auto Reborn", 
    Default = false
})

local rebornConnection

AutoRebornToggle:OnChanged(function(value)
    if value then
        rebornConnection = game:GetService("RunService").Heartbeat:Connect(function()
            if AutoRebornToggle.Value then
                game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("PlayerReborn"):FireServer()
            else
                rebornConnection:Disconnect()
            end
        end)
    else
        if rebornConnection then
            rebornConnection:Disconnect()
        end
    end
end)

local player = game:GetService("Players").LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local rootPart = character:WaitForChild("HumanoidRootPart")
local humanoid = character:WaitForChild("Humanoid")

local Toggle = Tabs.Player:AddToggle("MagnetDrops", {Title = "Magnet Drops", Default = false})

local runConnection
local updateInterval = 0.2
local bodyPositions = {}

Toggle:OnChanged(function(value)
    if value then
        runConnection = game:GetService("RunService").Heartbeat:Connect(function()
            local targetPosition = rootPart.Position
            local moveDirection = humanoid.MoveDirection
            local adjustedPosition = targetPosition + (moveDirection * 2)
            local processedCount = 0

            for _, drop in ipairs(workspace.Golds:GetChildren()) do
                if drop:IsA("BasePart") and processedCount < 10 then
                    local bodyPosition = bodyPositions[drop]

                    if not bodyPosition then
                        bodyPosition = Instance.new("BodyPosition")
                        bodyPosition.MaxForce = Vector3.new(1e10, 1e10, 1e10)
                        bodyPosition.P = 5e9
                        bodyPosition.D = 500
                        bodyPosition.Parent = drop
                        bodyPositions[drop] = bodyPosition
                    end

                    if (drop.Position - adjustedPosition).Magnitude > 0.5 then
                        bodyPosition.Position = adjustedPosition
                        drop.Velocity = Vector3.zero
                    else
                        drop.CFrame = CFrame.new(adjustedPosition)
                    end

                    processedCount = processedCount + 1
                end
            end
        end)
    else
        if runConnection then
            runConnection:Disconnect()
            runConnection = nil
        end
    end
end)

local Toggle = Tabs.Others:AddToggle("AutoSpin", {Title = "Auto Spin", Default = false})

Toggle:OnChanged(function(value)
    if value then
        while Toggle.Value do
            local args = {
                [1] = 1
            }

            game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("StartActivitySpin"):InvokeServer(unpack(args))
            task.wait(0.1)
        end
    end
end)

Tabs.Teleport:AddButton({
    Title = "Fantasy Valley",
    Callback = function()
        local args = {
            [1] = {
                ["mapId"] = 50001
            }
        }

        game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("LocalPlayerTeleport"):FireServer(unpack(args))
    end
})

Tabs.Teleport:AddButton({
    Title = "Seaside Villa",
    Callback = function()
        local args = {
            [1] = {
                ["mapId"] = 50002
            }
        }

        game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("LocalPlayerTeleport"):FireServer(unpack(args))
    end
})

Tabs.Teleport:AddButton({
    Title = "Congress Hall",
    Callback = function()
        local args = {
            [1] = {
                ["mapId"] = 50003
            }
        }

        game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("LocalPlayerTeleport"):FireServer(unpack(args))
    end
})

Tabs.Teleport:AddButton({
    Title = "Border Territory",
    Callback = function()
        local args = {
            [1] = {
                ["mapId"] = 50004
            }
        }

        game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("LocalPlayerTeleport"):FireServer(unpack(args))
    end
})

Tabs.Teleport:AddButton({
    Title = "Polar Plain",
    Callback = function()
        local args = {
            [1] = {
                ["mapId"] = 50005
            }
        }

        game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("LocalPlayerTeleport"):FireServer(unpack(args))
    end
})

Tabs.Teleport:AddButton({
    Title = "Demon Station",
    Callback = function()
        local args = {
            [1] = {
                ["mapId"] = 50006
            }
        }

        game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("LocalPlayerTeleport"):FireServer(unpack(args))
    end
})

Tabs.Teleport:AddButton({
    Title = "Hashira's Training",
    Callback = function()
        local args = {
            [1] = {
                ["mapId"] = 50007
            }
        }

        game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("LocalPlayerTeleport"):FireServer(unpack(args))
    end
})

Tabs.Teleport:AddButton({
    Title = "Infinite City",
    Callback = function()
        local args = {
            [1] = {
                ["mapId"] = 50008
            }
        }

        game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("LocalPlayerTeleport"):FireServer(unpack(args))
    end
})

Tabs.Teleport:AddButton({
    Title = "Naruto Guardian Village",
    Callback = function()
        local args = {
            [1] = {
                ["mapId"] = 50009
            }
        }

        game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("LocalPlayerTeleport"):FireServer(unpack(args))
    end
})

Tabs.Teleport:AddButton({
    Title = "Pirate World",
    Callback = function()
        local args = {
            [1] = {
                ["mapId"] = 50010
            }
        }

        game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("LocalPlayerTeleport"):FireServer(unpack(args))
    end
})

local WalkSpeedSection = Tabs.Player:AddSection("WalkSpeed")

local player = game:GetService("Players").LocalPlayer
local humanoid = player.Character and player.Character:FindFirstChild("Humanoid")

-- Definindo o valor Default com base no WalkSpeed do jogador
local defaultWalkSpeed = humanoid and humanoid.WalkSpeed or 16

local Input = Tabs.Player:AddInput("SpeedInput", {
    Title = "Write WalkSpeed", 
    Default = tostring(defaultWalkSpeed),  -- Configurando o Default para a velocidade atual
    Placeholder = "Enter Speed", 
    Numeric = true, 
    Finished = true, 
    Callback = function(Value) 
    end
})

Input:OnChanged(function() end)

local Toggle = Tabs.Player:AddToggle("SpeedToggle", {
    Title = "Apply WalkSpeed", 
    Default = false
})

Toggle:OnChanged(function()
    local humanoid = player.Character and player.Character:FindFirstChild("Humanoid")
    if humanoid then
        if Toggle.Value then
            while Toggle.Value do
                local inputSpeed = tonumber(Input.Value)  -- Acessando o valor corretamente
                if inputSpeed and inputSpeed >= 16 then
                    humanoid.WalkSpeed = inputSpeed
                end
                wait(0.5)
            end
        else
            humanoid.WalkSpeed = 16
        end
    end
end)

Toggle:SetValue(false)

local Dropdown = Tabs.Eggs:AddDropdown("LocationDropdown", {
    Title = "Select Egg",
    Default = "Fantasy Valley",
    Values = {"Fantasy Valley", "Seaside Villa", "Congress Hall", "Border Territory", "Polar Plain", "Demon Station", "Hashira's Training", "Infinite City", "Naruto Guardian Village", "Pirate World", "Dragon Ball", "Pirate Island"},
    Multi = false,
})

local Toggle = Tabs.Eggs:AddToggle("AutoExtractHeroToggle", {
    Title = "Auto Eggs",
    Default = false,
})

local isActive = false
local selectedLocation = "Fantasy Valley"

Dropdown:OnChanged(function(value)
    selectedLocation = value
end)

Toggle:OnChanged(function(value)
    isActive = value
end)

local function extractHero(location)
    local args = {}

    if location == "Fantasy Valley" then
        args = {
            [1] = {
                ["drawCardPlatformId"] = 70001,
                ["count"] = 3
            }
        }
    elseif location == "Seaside Villa" then
        args = {
            [1] = {
                ["drawCardPlatformId"] = 70003,
                ["count"] = 3
            }
        }
    elseif location == "Congress Hall" then
        args = {
            [1] = {
                ["drawCardPlatformId"] = 70005,
                ["count"] = 3
            }
        }
    elseif location == "Border Territory" then
        args = {
            [1] = {
                ["drawCardPlatformId"] = 70007,
                ["count"] = 3
            }
        }
    elseif location == "Polar Plain" then
        args = {
            [1] = {
                ["drawCardPlatformId"] = 70009,  -- ID para Polar Plain
                ["count"] = 3
            }
        }
    elseif location == "Demon Station" then
        args = {
            [1] = {
                ["drawCardPlatformId"] = 70011,
                ["count"] = 3
            }
        }
    elseif location == "Hashira's Training" then
        args = {
            [1] = {
                ["drawCardPlatformId"] = 70013,
                ["count"] = 3
            }
        }
    elseif location == "Infinite City" then
        args = {
            [1] = {
                ["drawCardPlatformId"] = 70015,
                ["count"] = 3
            }
        }
    elseif location == "Naruto Guardian Village" then
        args = {
            [1] = {
                ["drawCardPlatformId"] = 70017,
                ["count"] = 3
            }
        }
    elseif location == "Pirate World" then
        args = {
            [1] = {
                ["drawCardPlatformId"] = 70019,
                ["count"] = 3
            }
        }
    elseif location == "Dragon Ball" then
        args = {
            [1] = {
                ["drawCardPlatformId"] = 70021,  -- ID para Dragon Ball
                ["count"] = 3
            }
        }
    elseif location == "Pirate Island" then
        args = {
            [1] = {
                ["drawCardPlatformId"] = 70023,  -- ID para Pirate Island
                ["count"] = 3
            }
        }
    end
    
    if next(args) then
        game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("ExtractHero"):InvokeServer(unpack(args))
    end
end

game:GetService("RunService").Heartbeat:Connect(function()
    if isActive then
        extractHero(selectedLocation)
    end
end)

local AutoEquipBestHeroToggle = Tabs.Eggs:AddToggle("AutoEquipBestHeroToggle", {
    Title = "Auto Equip Best", 
    Default = false,
})

local equipHeroConnection

AutoEquipBestHeroToggle:OnChanged(function()
    if AutoEquipBestHeroToggle.Value then
        -- Iniciando o loop com task.wait
        while AutoEquipBestHeroToggle.Value do
            game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("AutoEquipBestHero"):FireServer()
            task.wait(0.1)
        end
    else
        -- Desconectando quando o toggle for desativado
        if equipHeroConnection then
            equipHeroConnection = nil
        end
    end
end)

repeat task.wait(0.25) until game:IsLoaded();
getgenv().Image = "rbxassetid://105006981404042";
getgenv().ToggleUI = Enum.KeyCode.LeftControl

task.spawn(function()
    if not getgenv().LoadedMobileUI == true then getgenv().LoadedMobileUI = true
        local OpenUI = Instance.new("ScreenGui");
        local ImageButton = Instance.new("ImageButton");
        local UICorner = Instance.new("UICorner");
        OpenUI.Name = "OpenUI";
        OpenUI.Parent = game:GetService("CoreGui");
        OpenUI.ZIndexBehavior = Enum.ZIndexBehavior.Sibling;
        ImageButton.Parent = OpenUI;
        ImageButton.BackgroundColor3 = Color3.fromRGB(105,105,105);
        ImageButton.BackgroundTransparency = 0.8
        ImageButton.Position = UDim2.new(0.9,0,0.1,0);
        ImageButton.Size = UDim2.new(0,50,0,50);
        ImageButton.Image = getgenv().Image;
        ImageButton.Draggable = true;
        ImageButton.Transparency = 1;
        UICorner.CornerRadius = UDim.new(0,0);
        UICorner.Parent = ImageButton;
        ImageButton.MouseButton1Click:Connect(function()
            game:GetService("VirtualInputManager"):SendKeyEvent(true, getgenv().ToggleUI, false, game);
        end)
    end
end)